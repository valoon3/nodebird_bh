기본 라우팅
 라우팅은 URI(또는 경로) 및 특정한 HTTP 요청 메소드(GET, POST 등)인 특정 엔드포인트에 대한 클라이언트 요청에 애플리케이션이 응답하는 방법을 결정하는 것을 말한다.
 - app.METHOD(path, handler)  // METHOD = GET || POST || PUT || DELETE
 ⌘ app 은 express 인스턴스이다.
 ⌘ handler 은 라우트가 일치할 때 실행되는 함수이다.

라우트 핸들러(handler)
 - 미들웨어와 비슷하게 작동하는 여러 콜백 함수를 제공하여 요청을 처리할 수 있습니다.
 - next 호출을 통해 콜백을 우회할 수도 있다. -> 현재 라우트를 계속할 이유가 없는 경우에는 제어를 후속 라우트에 전달할 수 있다.
 - 반드시 next 오브젝트를 지정해야한다. -> app.METHOD(path, handler, next) {

응답 메소드
 - res.download() : 파일이 다운로드되도록 프롬프트합니다.
 - res.end() : 응답 프로세스를 종료합니다.
 - res.json() : JSON 응답을 전송합니다.
 - res.jsonp() : JSONP 지원을 통해 JSON 응답을 전송합니다.
 - res.redirect() : 요청의 경로를 재지정합니다.
 - res.render() : 보기 템플리트를 렌더링합니다.
 - res.send() : 다양한 유형의 응답을 전송합니다.
 - res.sendFile() : 파일을 옥텟 스트림의 형태로 전송합니다.
 - res.sendStatus() : 응답 상태 코드를 설정한 후 해당 코드를 문자열로 표현한 내용을 응답 본문으로서 전송합니다.

미들웨어 작성
 - 미들웨어 함수는 요청 오브젝트(req), 응답 오브젝트(res), 그리고 애플리케이션의 요청-응답 주기 중 그 다음의 미들웨어 함수 대한 액세스 권한을 갖는 함수입니다.
 - 그 다음 미들웨어 함수는 일반적으로 next라는 이름의 변수로 표시된다.
 ⌘ 모든 코드를 실행
 ⌘ 현재의 미들웨어 함수가 요청-응답 주기를 종료하지 않는 경우에는 next()를 호출하여 그 다음 미들웨어 함수에 제어를 전달해야 합니다.

 app.get('/', (req, res, next) => {    // next: 미들웨어 함수에 대한 콜백 인수
    next();
 });

